#!/usr/bin/env python
# -*- coding: utf-8 -*

import pprint

"""
Description: This script generates mock trade report raw data (C24) per
             definition of the trade report message, aka C24.

struct S_GW_C24
{
    struct S_GW_Head            Head;
    char                        TradeKind[1];           /* 成交類別 */
    char                        PartyBrokerId[4];       /* 對方證券商代號 */
    char                        TraderName[10];         /* 交易員名稱 */
    char                        OrderSequenceNumber[7]; /* 系統委託序號 */
    char                        InvestorId[7];          /* 投資人帳號 */
    char                        StockId[6];             /* 股票代號 */
    char                        BuySell[1];             /* 己方買賣別 */
    char                        Price[10];               /* 成交價 */
    char                        Volume[8];              /* 成交股數 */
    char                        TradeTime[9];           /* 成交時間 */
    char                        QuoteSequenceNumber[7]; /* 市場報價序號 */
    char                        TradeSequenceNumber[7]; /* 系統成交序號 */
};

"""
data = [
"030524NuTest010900410000Z9800TE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest020900410000Z9800TE000852600000116770  100074.50000000700009004011500046370000579",
"030524NuTest030900410000Z8800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest040900410000Z123TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest050900410000Z123TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest060900410000Z123TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest070900410000Z980TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest080900410000Z980TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest090900410000Z980TTE000852666666556770  100074.50000000700009004011500046370000579",
"030524NuTest21090041000029800TE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest22090041000029800TE000852600000116770  100074.50000000700009004011500046370000579",
"030524NuTest23090041000028800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest2409004100002123TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest2509004100002123TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest2609004100002123TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest2709004100002980TTE000852600000116770  100074.50000000700009004011500046370000579",
"030524NuTest2809004100002980TTE000852600000016770  100074.50000000700009004011500046370000579",
"030524NuTest2909004100002980TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest61090041000069800TE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest62090041000069800TE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest63090041000068800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest6409004100006123TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest6509004100006123TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest6609004100006123TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest6709004100006980TTE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest6809004100006980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest6909004100006980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest71090041000079800TE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest72090041000079800TE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest73090041000078800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest7409004100007123TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest7509004100007123TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest7609004100007123TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest7709004100007980TTE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest7809004100007980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest7909004100007980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest81090041000089800TE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest82090041000089800TE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest83090041000088800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest8409004100008123TTE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest8509004100008123TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest8609004100008123TTE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest8709004100008980TTE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest8809004100008980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest8909004100008980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest91090041000099800TE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest92090041000099800TE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest93090041000098800TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest94090041000099801TE000852600000006770  100074.50000000700009004011500046370000579",
"030524NuTest95090041000099801TE000852688888816770  100074.50000000700009004011500046370000579",
"030524NuTest96090041000099801TE000852666666676770  100074.50000000700009004011500046370000579",
"030524NuTest9709004100009980TTE000852688888776770  100074.50000000700009004011500046370000579",
"030524NuTest9809004100009980TTE000852688888886770  100074.50000000700009004011500046370000579",
"030524NuTest9909004100009980TTE000852688888886770  100074.50000000700009004011500046370000579",
]

VALID_TRADE_KIND = ['2','6','7','8','9','Z']
PROPRIETARY_INVESTOR = ["000000", "666666", "888888"]

class Filter:
    def __init__(self):
        pass

    @classmethod
    def getTradeKind(cls, trdRpt):
        return trdRpt[24:25]

    @classmethod
    def getPartyBrokerID(cls, trdRpt):
        return trdRpt[25:29]

    @classmethod
    def getInvestorID(cls, trdRpt):
        return trdRpt[39:46]

    @classmethod
    def getTestNo(cls, trdRpt):
        return trdRpt[6:14]

    @classmethod
    def filter(cls, tradeKind, partyBrokerID, investorID, testNo):
        if tradeKind in VALID_TRADE_KIND and partyBrokerID.startswith("98"):
            return True
        if tradeKind in VALID_TRADE_KIND and not partyBrokerID.startswith("98"):
            if partyBrokerID.endswith("T") and not investorID[0:6] in PROPRIETARY_INVESTOR:
                return False
            return True
        print("WTF happened?")
        return True

def main():
    f = Filter()
    dataDict = {}
    ans = []
    for d in data:
        dataDict[f.getTestNo(d)] = d
        if f.filter(f.getTradeKind(d), f.getPartyBrokerID(d), f.getInvestorID(d), f.getTestNo(d)):
            ans.append(f.getTestNo(d))
    pprint.pprint(ans)
    #for keep in ans:
    #    pprint.pprint(dataDict[keep])

if __name__ == "__main__":
    main()
